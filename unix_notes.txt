apropos - search the manual page names and descriptions by keyword

man page: use / to search man page

Regular Expressions:

grep "x" file.txt
grep "nia" file.txt

The "." represents any character.
grep "i.g" states.txt --> "i" followed by any char followed by "g."
egrep "s+as" states.txt --> one or more occurances of "s" followed by "as."
egrep "s*as" states.txt --> zero or more occurances of "s" followed by "as."
egrep "s{2}" states.txt --> exactly two occurances of "s."
egrep "s{2}a" states.txt --> exactly two occurances of "s" followed by an "a."
egrep "s{1,3}" states.txt --> between one and three occurances of "s."
egrep "(is){1,3}" states.txt --> a capturing group between one and three occurances of "is."
egrep "(i.{2}){3}" states.txt --> three occurrences of an “i” followed by two of any character.

\w metacharacter corresponds to all “word” characters \W non-words
egrep "[0-9]" corresponds to all “number” characters 
\s metacharacter corresponds to all “space” characters \S non-spaces
-v flag shows the compliment

egrep "[aeiou]" small.txt --> match lines with small vowels
egrep "[^aeiouAEIOU]" small.txt --> match lines with not small and capitol vowels

egrep "^M" states.txt --> represents the start of a line. i.e. Maine, Mass
egrep "^[AEIOU]" states.txt --> start with a vowel
egrep "e$" states.txt --> represents the end of a line. i.e. Maine, Delaware
egrep "North|South" states.txt --> "or" metacharacter, i.e. North Dakota, South Carolina
-n flag shows line numbers
egrep "^[AEIOU]{1}.+[aeiou]{1}$" states.txt --> begin/end with vowel

Metacharacter	Meaning

.				Any character
\w				A word
\W				Not a word
\d				A digit
\D				Not a digit
\s				Whitespace
\S				Not whitespace
[def]			A Set of characters
[^def]			Negation of set
[e-q]			A Range of characters
^				Beginning of string
$				End of string
\n				Newline
+				One or more of previous
*				Zero or more of previous
?				Zero or one of previous
|				Either the previous or the following
{6}				Exactly 6 of previous
{4, 6}			Between 4 and 6 or previous
{4, }			More than 4 of previous

diff --> compare files line-by-line
sdiff --> compare files line-by-line side-by-side
md5 or md5sum --> computes the md5 hash of a file
shasum --> compute the SHA-1 hash of a file

expr --> does simple integer arithmetic i.e. expr 4 + 4
bc --> complicated arithmetic using echo. i.e echo "4.2 * 9.15" | bc -l

chapter_number=5 --> no spaces around equals sign.
store a shell command in a variable --> math_lines=$(cat states.txt | wc -l)

The shell variable $? stores the exit status of the last program run: i.e "echo $?"
true exit status --> 0
false exit status --> 1
command not found exit status --> 127
&& --> Programs joined by AND operators any programs to the right of a program that has a non-zero exit status is not executed. i.e. echo Hi && false && echo There --> Hi
|| --> Commands to the right of || only executed if command on left fails and therefore has an exit status other than 0.

To redirect the output of a commend into a variable, enlose the commend in $()
i.e. today=$(date +%a)